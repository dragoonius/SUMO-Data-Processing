#! /usr/bin/perl

#Created by Joseph Helsing
#This script is designed to convert SUMO .net.xml files into shapefiles. It does not inlucde any edges whose function is classified as internal. 
#As input it needs a .net.xml file generated by SUMO's NETCONVERT
#It outputs a file that contains the following in-order, tab delimited data: a unique generated ID, the name of the edge if one exists, the id of the edge, which lane the shape for the edge is being derived from, and a WKT Linestring of the points for the line
#To run the script type "perl netxml2Shape.pl filename" where filename is the name of your .net.xml file. It must also include ".net.xml" in the filename, e.g. example1.net.xml 

print "Starting conversion\n";

#First we check for the correct file being passed in as an argument

if($#ARGV + 1 != 1)
{
	print "Did not provide a .net.xml file. \n";
	exit;	
}
elsif(!($ARGV[0] =~ m/.net.xml/))
{
	print "Did not provide a .net.xml file. \n";
	exit;
}


$netxml = "$ARGV[0]";
open($NETXML, '<', $netxml) or die 'Could not open'. $netxml;

$output = "edgepreshape.csv";
open($OUTPUT, '>', $output) or die 'Could not open'. $output;

print $OUTPUT "uid\tedge_name\tedge_id\tlane_id\tgeom_text\n";

$uid = 1;
$netOffsetx = 0;
$netOffsety = 0;

#The UTM zone helps determine the offset of the current .net.xml file so that you can use that when loading the output into a GIS system

print "Don't forget to check the UTM Zone!\n";

while($line = <$NETXML>)
{

	if($line =~ m/<\/net>/)
	{
		print "Done Reading\n";
		last;
	}
	
#First we want to capute the offset from SUMO so we can subtract it from the coordinates in the shape file.
#SUMO uses the standard UTM format, and Denton, TX is in Zone 14.

	if($line =~ m/<location/)
	{
		$line =~ s/(<*.netOffset=")(.*?),(.*?)(".*>)/$1$2$3$4/;	
		
		$netOffsetx = $2;
		$netOffsety = $3;	
				
		print "netOffset= $netOffsetx,$netOffsety\n";
	}

#If the edge has the shape included we capture the shape there. Otherwise, we pick it up from the lane shape in the next line.

	if($line =~ m/<edge.*name=/)
	{

		$line =~ s/(<*.id=)"(.*?)"(.*name=)"(.*?)"(.*>)/$1$2$3$4$5/;
		
		$edgeid = $2;
		
		$name = $4;
				
		$line = <$NETXML>;
		
		while($line =~ m/<lane/)
		{

			#$line =~ s/(<*.shape=)"(.*?)"(.*>)/$1$2$3/;
			
			$line =~ s/(<*.id=)"(.*?)"(.*?shape=)"(.*?)"(.*>)/$1$2$3$4$5/;
			
			print $OUTPUT "$uid\t$name\t$edgeid\t$2\tLINESTRING (";
		
#Now we break the shape into its coordinates and subtract the offset from each pair

			@shapePieces = split(/ /, $4);
					
			for(my $i=0; $i < scalar(@shapePieces); $i++)
			{	
				$piece = @shapePieces[$i];			
				$piece =~ s/(.*),(.*)//;
				
				$tempx = $1-$netOffsetx;
				$tempy = $2-$netOffsety;
				
				print $OUTPUT "$tempx $tempy";
				
				if($i+1 < scalar(@shapePieces))
				{
					print $OUTPUT ", ";
				}
			}
		
			print $OUTPUT ")\n";
		
			$uid++;	

			$line = <$NETXML>;			
		}
	}
}

print "Conversion completed\n";